package com.wayto.track.storage;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACK_TABLE".
*/
public class TrackTableDao extends AbstractDao<TrackTable, Long> {

    public static final String TABLENAME = "TRACK_TABLE";

    /**
     * Properties of entity TrackTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property StartTime = new Property(2, long.class, "startTime", false, "START_TIME");
        public final static Property FinishTime = new Property(3, long.class, "finishTime", false, "FINISH_TIME");
        public final static Property Duration = new Property(4, long.class, "duration", false, "DURATION");
        public final static Property StartLongitude = new Property(5, double.class, "startLongitude", false, "START_LONGITUDE");
        public final static Property FinishLongitude = new Property(6, double.class, "finishLongitude", false, "FINISH_LONGITUDE");
        public final static Property StartLatitude = new Property(7, double.class, "startLatitude", false, "START_LATITUDE");
        public final static Property FinishLatitude = new Property(8, double.class, "finishLatitude", false, "FINISH_LATITUDE");
        public final static Property Distance = new Property(9, double.class, "distance", false, "DISTANCE");
        public final static Property Speed = new Property(10, float.class, "speed", false, "SPEED");
        public final static Property Status = new Property(11, int.class, "status", false, "STATUS");
        public final static Property Remark = new Property(12, String.class, "remark", false, "REMARK");
        public final static Property RevStr1 = new Property(13, String.class, "revStr1", false, "REV_STR1");
        public final static Property RevStr2 = new Property(14, String.class, "revStr2", false, "REV_STR2");
        public final static Property RevStr3 = new Property(15, String.class, "revStr3", false, "REV_STR3");
        public final static Property RevStr4 = new Property(16, String.class, "revStr4", false, "REV_STR4");
        public final static Property RevInt1 = new Property(17, int.class, "revInt1", false, "REV_INT1");
        public final static Property RevInt2 = new Property(18, int.class, "revInt2", false, "REV_INT2");
        public final static Property RevInt3 = new Property(19, int.class, "revInt3", false, "REV_INT3");
        public final static Property RevInt4 = new Property(20, int.class, "revInt4", false, "REV_INT4");
    }


    public TrackTableDao(DaoConfig config) {
        super(config);
    }
    
    public TrackTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACK_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY\" TEXT," + // 1: key
                "\"START_TIME\" INTEGER NOT NULL ," + // 2: startTime
                "\"FINISH_TIME\" INTEGER NOT NULL ," + // 3: finishTime
                "\"DURATION\" INTEGER NOT NULL ," + // 4: duration
                "\"START_LONGITUDE\" REAL NOT NULL ," + // 5: startLongitude
                "\"FINISH_LONGITUDE\" REAL NOT NULL ," + // 6: finishLongitude
                "\"START_LATITUDE\" REAL NOT NULL ," + // 7: startLatitude
                "\"FINISH_LATITUDE\" REAL NOT NULL ," + // 8: finishLatitude
                "\"DISTANCE\" REAL NOT NULL ," + // 9: distance
                "\"SPEED\" REAL NOT NULL ," + // 10: speed
                "\"STATUS\" INTEGER NOT NULL ," + // 11: status
                "\"REMARK\" TEXT," + // 12: remark
                "\"REV_STR1\" TEXT," + // 13: revStr1
                "\"REV_STR2\" TEXT," + // 14: revStr2
                "\"REV_STR3\" TEXT," + // 15: revStr3
                "\"REV_STR4\" TEXT," + // 16: revStr4
                "\"REV_INT1\" INTEGER NOT NULL ," + // 17: revInt1
                "\"REV_INT2\" INTEGER NOT NULL ," + // 18: revInt2
                "\"REV_INT3\" INTEGER NOT NULL ," + // 19: revInt3
                "\"REV_INT4\" INTEGER NOT NULL );"); // 20: revInt4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACK_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrackTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
        stmt.bindLong(3, entity.getStartTime());
        stmt.bindLong(4, entity.getFinishTime());
        stmt.bindLong(5, entity.getDuration());
        stmt.bindDouble(6, entity.getStartLongitude());
        stmt.bindDouble(7, entity.getFinishLongitude());
        stmt.bindDouble(8, entity.getStartLatitude());
        stmt.bindDouble(9, entity.getFinishLatitude());
        stmt.bindDouble(10, entity.getDistance());
        stmt.bindDouble(11, entity.getSpeed());
        stmt.bindLong(12, entity.getStatus());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String revStr1 = entity.getRevStr1();
        if (revStr1 != null) {
            stmt.bindString(14, revStr1);
        }
 
        String revStr2 = entity.getRevStr2();
        if (revStr2 != null) {
            stmt.bindString(15, revStr2);
        }
 
        String revStr3 = entity.getRevStr3();
        if (revStr3 != null) {
            stmt.bindString(16, revStr3);
        }
 
        String revStr4 = entity.getRevStr4();
        if (revStr4 != null) {
            stmt.bindString(17, revStr4);
        }
        stmt.bindLong(18, entity.getRevInt1());
        stmt.bindLong(19, entity.getRevInt2());
        stmt.bindLong(20, entity.getRevInt3());
        stmt.bindLong(21, entity.getRevInt4());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrackTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
        stmt.bindLong(3, entity.getStartTime());
        stmt.bindLong(4, entity.getFinishTime());
        stmt.bindLong(5, entity.getDuration());
        stmt.bindDouble(6, entity.getStartLongitude());
        stmt.bindDouble(7, entity.getFinishLongitude());
        stmt.bindDouble(8, entity.getStartLatitude());
        stmt.bindDouble(9, entity.getFinishLatitude());
        stmt.bindDouble(10, entity.getDistance());
        stmt.bindDouble(11, entity.getSpeed());
        stmt.bindLong(12, entity.getStatus());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String revStr1 = entity.getRevStr1();
        if (revStr1 != null) {
            stmt.bindString(14, revStr1);
        }
 
        String revStr2 = entity.getRevStr2();
        if (revStr2 != null) {
            stmt.bindString(15, revStr2);
        }
 
        String revStr3 = entity.getRevStr3();
        if (revStr3 != null) {
            stmt.bindString(16, revStr3);
        }
 
        String revStr4 = entity.getRevStr4();
        if (revStr4 != null) {
            stmt.bindString(17, revStr4);
        }
        stmt.bindLong(18, entity.getRevInt1());
        stmt.bindLong(19, entity.getRevInt2());
        stmt.bindLong(20, entity.getRevInt3());
        stmt.bindLong(21, entity.getRevInt4());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrackTable readEntity(Cursor cursor, int offset) {
        TrackTable entity = new TrackTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key
            cursor.getLong(offset + 2), // startTime
            cursor.getLong(offset + 3), // finishTime
            cursor.getLong(offset + 4), // duration
            cursor.getDouble(offset + 5), // startLongitude
            cursor.getDouble(offset + 6), // finishLongitude
            cursor.getDouble(offset + 7), // startLatitude
            cursor.getDouble(offset + 8), // finishLatitude
            cursor.getDouble(offset + 9), // distance
            cursor.getFloat(offset + 10), // speed
            cursor.getInt(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // remark
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // revStr1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // revStr2
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // revStr3
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // revStr4
            cursor.getInt(offset + 17), // revInt1
            cursor.getInt(offset + 18), // revInt2
            cursor.getInt(offset + 19), // revInt3
            cursor.getInt(offset + 20) // revInt4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrackTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartTime(cursor.getLong(offset + 2));
        entity.setFinishTime(cursor.getLong(offset + 3));
        entity.setDuration(cursor.getLong(offset + 4));
        entity.setStartLongitude(cursor.getDouble(offset + 5));
        entity.setFinishLongitude(cursor.getDouble(offset + 6));
        entity.setStartLatitude(cursor.getDouble(offset + 7));
        entity.setFinishLatitude(cursor.getDouble(offset + 8));
        entity.setDistance(cursor.getDouble(offset + 9));
        entity.setSpeed(cursor.getFloat(offset + 10));
        entity.setStatus(cursor.getInt(offset + 11));
        entity.setRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRevStr1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRevStr2(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRevStr3(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRevStr4(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRevInt1(cursor.getInt(offset + 17));
        entity.setRevInt2(cursor.getInt(offset + 18));
        entity.setRevInt3(cursor.getInt(offset + 19));
        entity.setRevInt4(cursor.getInt(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrackTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrackTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrackTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
