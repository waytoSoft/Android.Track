package com.wayto.track.storage;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACK_POINT_TABLE".
*/
public class TrackPointTableDao extends AbstractDao<TrackPointTable, Long> {

    public static final String TABLENAME = "TRACK_POINT_TABLE";

    /**
     * Properties of entity TrackPointTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TarckTableId = new Property(1, long.class, "tarckTableId", false, "TARCK_TABLE_ID");
        public final static Property Longitude = new Property(2, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(3, double.class, "latitude", false, "LATITUDE");
        public final static Property Altitude = new Property(4, float.class, "altitude", false, "ALTITUDE");
        public final static Property Speed = new Property(5, int.class, "speed", false, "SPEED");
        public final static Property Accuracy = new Property(6, double.class, "accuracy", false, "ACCURACY");
        public final static Property Source = new Property(7, int.class, "source", false, "SOURCE");
        public final static Property Provider = new Property(8, String.class, "provider", false, "PROVIDER");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property Signal = new Property(10, int.class, "signal", false, "SIGNAL");
        public final static Property LocationTime = new Property(11, long.class, "locationTime", false, "LOCATION_TIME");
        public final static Property RevStr1 = new Property(12, String.class, "revStr1", false, "REV_STR1");
        public final static Property RevStr2 = new Property(13, String.class, "revStr2", false, "REV_STR2");
        public final static Property RevStr3 = new Property(14, String.class, "revStr3", false, "REV_STR3");
        public final static Property RevStr4 = new Property(15, String.class, "revStr4", false, "REV_STR4");
        public final static Property RevInt1 = new Property(16, int.class, "revInt1", false, "REV_INT1");
        public final static Property RevInt2 = new Property(17, int.class, "revInt2", false, "REV_INT2");
        public final static Property RevInt3 = new Property(18, int.class, "revInt3", false, "REV_INT3");
        public final static Property RevInt4 = new Property(19, int.class, "revInt4", false, "REV_INT4");
    }


    public TrackPointTableDao(DaoConfig config) {
        super(config);
    }
    
    public TrackPointTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACK_POINT_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TARCK_TABLE_ID\" INTEGER NOT NULL ," + // 1: tarckTableId
                "\"LONGITUDE\" REAL NOT NULL ," + // 2: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 3: latitude
                "\"ALTITUDE\" REAL NOT NULL ," + // 4: altitude
                "\"SPEED\" INTEGER NOT NULL ," + // 5: speed
                "\"ACCURACY\" REAL NOT NULL ," + // 6: accuracy
                "\"SOURCE\" INTEGER NOT NULL ," + // 7: source
                "\"PROVIDER\" TEXT," + // 8: provider
                "\"ADDRESS\" TEXT," + // 9: address
                "\"SIGNAL\" INTEGER NOT NULL ," + // 10: signal
                "\"LOCATION_TIME\" INTEGER NOT NULL ," + // 11: locationTime
                "\"REV_STR1\" TEXT," + // 12: revStr1
                "\"REV_STR2\" TEXT," + // 13: revStr2
                "\"REV_STR3\" TEXT," + // 14: revStr3
                "\"REV_STR4\" TEXT," + // 15: revStr4
                "\"REV_INT1\" INTEGER NOT NULL ," + // 16: revInt1
                "\"REV_INT2\" INTEGER NOT NULL ," + // 17: revInt2
                "\"REV_INT3\" INTEGER NOT NULL ," + // 18: revInt3
                "\"REV_INT4\" INTEGER NOT NULL );"); // 19: revInt4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACK_POINT_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrackPointTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTarckTableId());
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getAltitude());
        stmt.bindLong(6, entity.getSpeed());
        stmt.bindDouble(7, entity.getAccuracy());
        stmt.bindLong(8, entity.getSource());
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(9, provider);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
        stmt.bindLong(11, entity.getSignal());
        stmt.bindLong(12, entity.getLocationTime());
 
        String revStr1 = entity.getRevStr1();
        if (revStr1 != null) {
            stmt.bindString(13, revStr1);
        }
 
        String revStr2 = entity.getRevStr2();
        if (revStr2 != null) {
            stmt.bindString(14, revStr2);
        }
 
        String revStr3 = entity.getRevStr3();
        if (revStr3 != null) {
            stmt.bindString(15, revStr3);
        }
 
        String revStr4 = entity.getRevStr4();
        if (revStr4 != null) {
            stmt.bindString(16, revStr4);
        }
        stmt.bindLong(17, entity.getRevInt1());
        stmt.bindLong(18, entity.getRevInt2());
        stmt.bindLong(19, entity.getRevInt3());
        stmt.bindLong(20, entity.getRevInt4());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrackPointTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTarckTableId());
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getAltitude());
        stmt.bindLong(6, entity.getSpeed());
        stmt.bindDouble(7, entity.getAccuracy());
        stmt.bindLong(8, entity.getSource());
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(9, provider);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
        stmt.bindLong(11, entity.getSignal());
        stmt.bindLong(12, entity.getLocationTime());
 
        String revStr1 = entity.getRevStr1();
        if (revStr1 != null) {
            stmt.bindString(13, revStr1);
        }
 
        String revStr2 = entity.getRevStr2();
        if (revStr2 != null) {
            stmt.bindString(14, revStr2);
        }
 
        String revStr3 = entity.getRevStr3();
        if (revStr3 != null) {
            stmt.bindString(15, revStr3);
        }
 
        String revStr4 = entity.getRevStr4();
        if (revStr4 != null) {
            stmt.bindString(16, revStr4);
        }
        stmt.bindLong(17, entity.getRevInt1());
        stmt.bindLong(18, entity.getRevInt2());
        stmt.bindLong(19, entity.getRevInt3());
        stmt.bindLong(20, entity.getRevInt4());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrackPointTable readEntity(Cursor cursor, int offset) {
        TrackPointTable entity = new TrackPointTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // tarckTableId
            cursor.getDouble(offset + 2), // longitude
            cursor.getDouble(offset + 3), // latitude
            cursor.getFloat(offset + 4), // altitude
            cursor.getInt(offset + 5), // speed
            cursor.getDouble(offset + 6), // accuracy
            cursor.getInt(offset + 7), // source
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // provider
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.getInt(offset + 10), // signal
            cursor.getLong(offset + 11), // locationTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // revStr1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // revStr2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // revStr3
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // revStr4
            cursor.getInt(offset + 16), // revInt1
            cursor.getInt(offset + 17), // revInt2
            cursor.getInt(offset + 18), // revInt3
            cursor.getInt(offset + 19) // revInt4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrackPointTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTarckTableId(cursor.getLong(offset + 1));
        entity.setLongitude(cursor.getDouble(offset + 2));
        entity.setLatitude(cursor.getDouble(offset + 3));
        entity.setAltitude(cursor.getFloat(offset + 4));
        entity.setSpeed(cursor.getInt(offset + 5));
        entity.setAccuracy(cursor.getDouble(offset + 6));
        entity.setSource(cursor.getInt(offset + 7));
        entity.setProvider(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSignal(cursor.getInt(offset + 10));
        entity.setLocationTime(cursor.getLong(offset + 11));
        entity.setRevStr1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRevStr2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRevStr3(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRevStr4(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRevInt1(cursor.getInt(offset + 16));
        entity.setRevInt2(cursor.getInt(offset + 17));
        entity.setRevInt3(cursor.getInt(offset + 18));
        entity.setRevInt4(cursor.getInt(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrackPointTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrackPointTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrackPointTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
